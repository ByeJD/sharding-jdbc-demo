spring:
  shardingsphere:
    datasource:
      # 数据源名称，多数据源以逗号分隔
      names: ds0
      # 数据源ds0
      ds0:
        # 数据库连接池类名称
        type: com.alibaba.druid.pool.DruidDataSource
        #数据库驱动类名
        driver-class-name: com.mysql.jdbc.Driver
        #数据库url连接
        url: jdbc:mysql://localhost:3306/demo_ds
        username: root
        password: admin
    sharding:
      tables:
        t_order:
          # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
          # 缺省表示使用已知数据源与逻辑表名称生成数据节点。用于广播表（即每个库中都需要一个同
          # 样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
          actual-data-nodes: ds0.t_order$->{0..1}
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: t_order$->{order_id % 2}
          key-generator:
            column: order_id
            type: SNOWFLAKE
        t_order_item:
          actual-data-nodes: ds0.t_order_item$->{0..1}
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: t_order_item$->{order_id % 2}
          key-generator:
            column: order_item_id
            type: SNOWFLAKE
            props:
              work:
                id: 1024
              max:
                tolerate:
                  time:
                    difference:
                      # 解决SNOWFLAKE时钟回拨问题,默认是10ms
                      milliseconds: 1000
      # 这个是什么意思
      binding-tables: t_order,t_order_item
#      broadcast-tables: t_config
#      default-database-strategy:
#        inline:
#          sharding-column: user_id
#          algorithm-expression: ds$->{user_id % 2}


mybatis:
  mapper-locations: classpath:/mapper/*.xml
  type-aliases-package: com.quan.shardingjdbcdemo.shardingjdbc.entity

logging:
  level:
    org.springframework: info
  config: classpath:log/logback-dev.xml
